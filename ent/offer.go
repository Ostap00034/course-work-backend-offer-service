// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Ostap00034/course-work-backend-offer-service/ent/offer"
	"github.com/google/uuid"
)

// Offer is the model entity for the Offer schema.
type Offer struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// ID исполнителя который предлагает заказ
	MasterID uuid.UUID `json:"master_id,omitempty"`
	// ID заказа
	OrderID uuid.UUID `json:"order_id,omitempty"`
	// Status holds the value of the "status" field.
	Status offer.Status `json:"status,omitempty"`
	// Цена
	Price float32 `json:"price,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt    time.Time `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Offer) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case offer.FieldPrice:
			values[i] = new(sql.NullFloat64)
		case offer.FieldStatus:
			values[i] = new(sql.NullString)
		case offer.FieldCreatedAt, offer.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case offer.FieldID, offer.FieldMasterID, offer.FieldOrderID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Offer fields.
func (o *Offer) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case offer.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				o.ID = *value
			}
		case offer.FieldMasterID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field master_id", values[i])
			} else if value != nil {
				o.MasterID = *value
			}
		case offer.FieldOrderID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field order_id", values[i])
			} else if value != nil {
				o.OrderID = *value
			}
		case offer.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				o.Status = offer.Status(value.String)
			}
		case offer.FieldPrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value.Valid {
				o.Price = float32(value.Float64)
			}
		case offer.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				o.CreatedAt = value.Time
			}
		case offer.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				o.UpdatedAt = value.Time
			}
		default:
			o.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Offer.
// This includes values selected through modifiers, order, etc.
func (o *Offer) Value(name string) (ent.Value, error) {
	return o.selectValues.Get(name)
}

// Update returns a builder for updating this Offer.
// Note that you need to call Offer.Unwrap() before calling this method if this Offer
// was returned from a transaction, and the transaction was committed or rolled back.
func (o *Offer) Update() *OfferUpdateOne {
	return NewOfferClient(o.config).UpdateOne(o)
}

// Unwrap unwraps the Offer entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (o *Offer) Unwrap() *Offer {
	_tx, ok := o.config.driver.(*txDriver)
	if !ok {
		panic("ent: Offer is not a transactional entity")
	}
	o.config.driver = _tx.drv
	return o
}

// String implements the fmt.Stringer.
func (o *Offer) String() string {
	var builder strings.Builder
	builder.WriteString("Offer(")
	builder.WriteString(fmt.Sprintf("id=%v, ", o.ID))
	builder.WriteString("master_id=")
	builder.WriteString(fmt.Sprintf("%v", o.MasterID))
	builder.WriteString(", ")
	builder.WriteString("order_id=")
	builder.WriteString(fmt.Sprintf("%v", o.OrderID))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", o.Status))
	builder.WriteString(", ")
	builder.WriteString("price=")
	builder.WriteString(fmt.Sprintf("%v", o.Price))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(o.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(o.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Offers is a parsable slice of Offer.
type Offers []*Offer
