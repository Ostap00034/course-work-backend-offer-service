// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Ostap00034/course-work-backend-offer-service/ent/offer"
	"github.com/Ostap00034/course-work-backend-offer-service/ent/predicate"
	"github.com/google/uuid"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeOffer = "Offer"
)

// OfferMutation represents an operation that mutates the Offer nodes in the graph.
type OfferMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	master_id     *uuid.UUID
	order_id      *uuid.UUID
	status        *offer.Status
	price         *float32
	addprice      *float32
	created_at    *time.Time
	updated_at    *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Offer, error)
	predicates    []predicate.Offer
}

var _ ent.Mutation = (*OfferMutation)(nil)

// offerOption allows management of the mutation configuration using functional options.
type offerOption func(*OfferMutation)

// newOfferMutation creates new mutation for the Offer entity.
func newOfferMutation(c config, op Op, opts ...offerOption) *OfferMutation {
	m := &OfferMutation{
		config:        c,
		op:            op,
		typ:           TypeOffer,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withOfferID sets the ID field of the mutation.
func withOfferID(id uuid.UUID) offerOption {
	return func(m *OfferMutation) {
		var (
			err   error
			once  sync.Once
			value *Offer
		)
		m.oldValue = func(ctx context.Context) (*Offer, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Offer.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withOffer sets the old Offer of the mutation.
func withOffer(node *Offer) offerOption {
	return func(m *OfferMutation) {
		m.oldValue = func(context.Context) (*Offer, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m OfferMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m OfferMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Offer entities.
func (m *OfferMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *OfferMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *OfferMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Offer.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetMasterID sets the "master_id" field.
func (m *OfferMutation) SetMasterID(u uuid.UUID) {
	m.master_id = &u
}

// MasterID returns the value of the "master_id" field in the mutation.
func (m *OfferMutation) MasterID() (r uuid.UUID, exists bool) {
	v := m.master_id
	if v == nil {
		return
	}
	return *v, true
}

// OldMasterID returns the old "master_id" field's value of the Offer entity.
// If the Offer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OfferMutation) OldMasterID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMasterID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMasterID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMasterID: %w", err)
	}
	return oldValue.MasterID, nil
}

// ResetMasterID resets all changes to the "master_id" field.
func (m *OfferMutation) ResetMasterID() {
	m.master_id = nil
}

// SetOrderID sets the "order_id" field.
func (m *OfferMutation) SetOrderID(u uuid.UUID) {
	m.order_id = &u
}

// OrderID returns the value of the "order_id" field in the mutation.
func (m *OfferMutation) OrderID() (r uuid.UUID, exists bool) {
	v := m.order_id
	if v == nil {
		return
	}
	return *v, true
}

// OldOrderID returns the old "order_id" field's value of the Offer entity.
// If the Offer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OfferMutation) OldOrderID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrderID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrderID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrderID: %w", err)
	}
	return oldValue.OrderID, nil
}

// ResetOrderID resets all changes to the "order_id" field.
func (m *OfferMutation) ResetOrderID() {
	m.order_id = nil
}

// SetStatus sets the "status" field.
func (m *OfferMutation) SetStatus(o offer.Status) {
	m.status = &o
}

// Status returns the value of the "status" field in the mutation.
func (m *OfferMutation) Status() (r offer.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Offer entity.
// If the Offer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OfferMutation) OldStatus(ctx context.Context) (v offer.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *OfferMutation) ResetStatus() {
	m.status = nil
}

// SetPrice sets the "price" field.
func (m *OfferMutation) SetPrice(f float32) {
	m.price = &f
	m.addprice = nil
}

// Price returns the value of the "price" field in the mutation.
func (m *OfferMutation) Price() (r float32, exists bool) {
	v := m.price
	if v == nil {
		return
	}
	return *v, true
}

// OldPrice returns the old "price" field's value of the Offer entity.
// If the Offer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OfferMutation) OldPrice(ctx context.Context) (v float32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPrice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPrice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrice: %w", err)
	}
	return oldValue.Price, nil
}

// AddPrice adds f to the "price" field.
func (m *OfferMutation) AddPrice(f float32) {
	if m.addprice != nil {
		*m.addprice += f
	} else {
		m.addprice = &f
	}
}

// AddedPrice returns the value that was added to the "price" field in this mutation.
func (m *OfferMutation) AddedPrice() (r float32, exists bool) {
	v := m.addprice
	if v == nil {
		return
	}
	return *v, true
}

// ResetPrice resets all changes to the "price" field.
func (m *OfferMutation) ResetPrice() {
	m.price = nil
	m.addprice = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *OfferMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *OfferMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Offer entity.
// If the Offer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OfferMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *OfferMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *OfferMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *OfferMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Offer entity.
// If the Offer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OfferMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *OfferMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// Where appends a list predicates to the OfferMutation builder.
func (m *OfferMutation) Where(ps ...predicate.Offer) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the OfferMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *OfferMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Offer, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *OfferMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *OfferMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Offer).
func (m *OfferMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *OfferMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.master_id != nil {
		fields = append(fields, offer.FieldMasterID)
	}
	if m.order_id != nil {
		fields = append(fields, offer.FieldOrderID)
	}
	if m.status != nil {
		fields = append(fields, offer.FieldStatus)
	}
	if m.price != nil {
		fields = append(fields, offer.FieldPrice)
	}
	if m.created_at != nil {
		fields = append(fields, offer.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, offer.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *OfferMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case offer.FieldMasterID:
		return m.MasterID()
	case offer.FieldOrderID:
		return m.OrderID()
	case offer.FieldStatus:
		return m.Status()
	case offer.FieldPrice:
		return m.Price()
	case offer.FieldCreatedAt:
		return m.CreatedAt()
	case offer.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *OfferMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case offer.FieldMasterID:
		return m.OldMasterID(ctx)
	case offer.FieldOrderID:
		return m.OldOrderID(ctx)
	case offer.FieldStatus:
		return m.OldStatus(ctx)
	case offer.FieldPrice:
		return m.OldPrice(ctx)
	case offer.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case offer.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Offer field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OfferMutation) SetField(name string, value ent.Value) error {
	switch name {
	case offer.FieldMasterID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMasterID(v)
		return nil
	case offer.FieldOrderID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrderID(v)
		return nil
	case offer.FieldStatus:
		v, ok := value.(offer.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case offer.FieldPrice:
		v, ok := value.(float32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrice(v)
		return nil
	case offer.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case offer.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Offer field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *OfferMutation) AddedFields() []string {
	var fields []string
	if m.addprice != nil {
		fields = append(fields, offer.FieldPrice)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *OfferMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case offer.FieldPrice:
		return m.AddedPrice()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OfferMutation) AddField(name string, value ent.Value) error {
	switch name {
	case offer.FieldPrice:
		v, ok := value.(float32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPrice(v)
		return nil
	}
	return fmt.Errorf("unknown Offer numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *OfferMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *OfferMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *OfferMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Offer nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *OfferMutation) ResetField(name string) error {
	switch name {
	case offer.FieldMasterID:
		m.ResetMasterID()
		return nil
	case offer.FieldOrderID:
		m.ResetOrderID()
		return nil
	case offer.FieldStatus:
		m.ResetStatus()
		return nil
	case offer.FieldPrice:
		m.ResetPrice()
		return nil
	case offer.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case offer.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Offer field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *OfferMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *OfferMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *OfferMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *OfferMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *OfferMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *OfferMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *OfferMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Offer unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *OfferMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Offer edge %s", name)
}
