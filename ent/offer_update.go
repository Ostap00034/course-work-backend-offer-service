// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Ostap00034/course-work-backend-offer-service/ent/offer"
	"github.com/Ostap00034/course-work-backend-offer-service/ent/predicate"
	"github.com/google/uuid"
)

// OfferUpdate is the builder for updating Offer entities.
type OfferUpdate struct {
	config
	hooks    []Hook
	mutation *OfferMutation
}

// Where appends a list predicates to the OfferUpdate builder.
func (ou *OfferUpdate) Where(ps ...predicate.Offer) *OfferUpdate {
	ou.mutation.Where(ps...)
	return ou
}

// SetMasterID sets the "master_id" field.
func (ou *OfferUpdate) SetMasterID(u uuid.UUID) *OfferUpdate {
	ou.mutation.SetMasterID(u)
	return ou
}

// SetNillableMasterID sets the "master_id" field if the given value is not nil.
func (ou *OfferUpdate) SetNillableMasterID(u *uuid.UUID) *OfferUpdate {
	if u != nil {
		ou.SetMasterID(*u)
	}
	return ou
}

// SetOrderID sets the "order_id" field.
func (ou *OfferUpdate) SetOrderID(u uuid.UUID) *OfferUpdate {
	ou.mutation.SetOrderID(u)
	return ou
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (ou *OfferUpdate) SetNillableOrderID(u *uuid.UUID) *OfferUpdate {
	if u != nil {
		ou.SetOrderID(*u)
	}
	return ou
}

// SetStatus sets the "status" field.
func (ou *OfferUpdate) SetStatus(o offer.Status) *OfferUpdate {
	ou.mutation.SetStatus(o)
	return ou
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ou *OfferUpdate) SetNillableStatus(o *offer.Status) *OfferUpdate {
	if o != nil {
		ou.SetStatus(*o)
	}
	return ou
}

// SetPrice sets the "price" field.
func (ou *OfferUpdate) SetPrice(f float32) *OfferUpdate {
	ou.mutation.ResetPrice()
	ou.mutation.SetPrice(f)
	return ou
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (ou *OfferUpdate) SetNillablePrice(f *float32) *OfferUpdate {
	if f != nil {
		ou.SetPrice(*f)
	}
	return ou
}

// AddPrice adds f to the "price" field.
func (ou *OfferUpdate) AddPrice(f float32) *OfferUpdate {
	ou.mutation.AddPrice(f)
	return ou
}

// SetCreatedAt sets the "created_at" field.
func (ou *OfferUpdate) SetCreatedAt(t time.Time) *OfferUpdate {
	ou.mutation.SetCreatedAt(t)
	return ou
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ou *OfferUpdate) SetNillableCreatedAt(t *time.Time) *OfferUpdate {
	if t != nil {
		ou.SetCreatedAt(*t)
	}
	return ou
}

// SetUpdatedAt sets the "updated_at" field.
func (ou *OfferUpdate) SetUpdatedAt(t time.Time) *OfferUpdate {
	ou.mutation.SetUpdatedAt(t)
	return ou
}

// Mutation returns the OfferMutation object of the builder.
func (ou *OfferUpdate) Mutation() *OfferMutation {
	return ou.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ou *OfferUpdate) Save(ctx context.Context) (int, error) {
	ou.defaults()
	return withHooks(ctx, ou.sqlSave, ou.mutation, ou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ou *OfferUpdate) SaveX(ctx context.Context) int {
	affected, err := ou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ou *OfferUpdate) Exec(ctx context.Context) error {
	_, err := ou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ou *OfferUpdate) ExecX(ctx context.Context) {
	if err := ou.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ou *OfferUpdate) defaults() {
	if _, ok := ou.mutation.UpdatedAt(); !ok {
		v := offer.UpdateDefaultUpdatedAt()
		ou.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ou *OfferUpdate) check() error {
	if v, ok := ou.mutation.Status(); ok {
		if err := offer.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Offer.status": %w`, err)}
		}
	}
	return nil
}

func (ou *OfferUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ou.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(offer.Table, offer.Columns, sqlgraph.NewFieldSpec(offer.FieldID, field.TypeUUID))
	if ps := ou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ou.mutation.MasterID(); ok {
		_spec.SetField(offer.FieldMasterID, field.TypeUUID, value)
	}
	if value, ok := ou.mutation.OrderID(); ok {
		_spec.SetField(offer.FieldOrderID, field.TypeUUID, value)
	}
	if value, ok := ou.mutation.Status(); ok {
		_spec.SetField(offer.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := ou.mutation.Price(); ok {
		_spec.SetField(offer.FieldPrice, field.TypeFloat32, value)
	}
	if value, ok := ou.mutation.AddedPrice(); ok {
		_spec.AddField(offer.FieldPrice, field.TypeFloat32, value)
	}
	if value, ok := ou.mutation.CreatedAt(); ok {
		_spec.SetField(offer.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ou.mutation.UpdatedAt(); ok {
		_spec.SetField(offer.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{offer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ou.mutation.done = true
	return n, nil
}

// OfferUpdateOne is the builder for updating a single Offer entity.
type OfferUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OfferMutation
}

// SetMasterID sets the "master_id" field.
func (ouo *OfferUpdateOne) SetMasterID(u uuid.UUID) *OfferUpdateOne {
	ouo.mutation.SetMasterID(u)
	return ouo
}

// SetNillableMasterID sets the "master_id" field if the given value is not nil.
func (ouo *OfferUpdateOne) SetNillableMasterID(u *uuid.UUID) *OfferUpdateOne {
	if u != nil {
		ouo.SetMasterID(*u)
	}
	return ouo
}

// SetOrderID sets the "order_id" field.
func (ouo *OfferUpdateOne) SetOrderID(u uuid.UUID) *OfferUpdateOne {
	ouo.mutation.SetOrderID(u)
	return ouo
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (ouo *OfferUpdateOne) SetNillableOrderID(u *uuid.UUID) *OfferUpdateOne {
	if u != nil {
		ouo.SetOrderID(*u)
	}
	return ouo
}

// SetStatus sets the "status" field.
func (ouo *OfferUpdateOne) SetStatus(o offer.Status) *OfferUpdateOne {
	ouo.mutation.SetStatus(o)
	return ouo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ouo *OfferUpdateOne) SetNillableStatus(o *offer.Status) *OfferUpdateOne {
	if o != nil {
		ouo.SetStatus(*o)
	}
	return ouo
}

// SetPrice sets the "price" field.
func (ouo *OfferUpdateOne) SetPrice(f float32) *OfferUpdateOne {
	ouo.mutation.ResetPrice()
	ouo.mutation.SetPrice(f)
	return ouo
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (ouo *OfferUpdateOne) SetNillablePrice(f *float32) *OfferUpdateOne {
	if f != nil {
		ouo.SetPrice(*f)
	}
	return ouo
}

// AddPrice adds f to the "price" field.
func (ouo *OfferUpdateOne) AddPrice(f float32) *OfferUpdateOne {
	ouo.mutation.AddPrice(f)
	return ouo
}

// SetCreatedAt sets the "created_at" field.
func (ouo *OfferUpdateOne) SetCreatedAt(t time.Time) *OfferUpdateOne {
	ouo.mutation.SetCreatedAt(t)
	return ouo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ouo *OfferUpdateOne) SetNillableCreatedAt(t *time.Time) *OfferUpdateOne {
	if t != nil {
		ouo.SetCreatedAt(*t)
	}
	return ouo
}

// SetUpdatedAt sets the "updated_at" field.
func (ouo *OfferUpdateOne) SetUpdatedAt(t time.Time) *OfferUpdateOne {
	ouo.mutation.SetUpdatedAt(t)
	return ouo
}

// Mutation returns the OfferMutation object of the builder.
func (ouo *OfferUpdateOne) Mutation() *OfferMutation {
	return ouo.mutation
}

// Where appends a list predicates to the OfferUpdate builder.
func (ouo *OfferUpdateOne) Where(ps ...predicate.Offer) *OfferUpdateOne {
	ouo.mutation.Where(ps...)
	return ouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ouo *OfferUpdateOne) Select(field string, fields ...string) *OfferUpdateOne {
	ouo.fields = append([]string{field}, fields...)
	return ouo
}

// Save executes the query and returns the updated Offer entity.
func (ouo *OfferUpdateOne) Save(ctx context.Context) (*Offer, error) {
	ouo.defaults()
	return withHooks(ctx, ouo.sqlSave, ouo.mutation, ouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ouo *OfferUpdateOne) SaveX(ctx context.Context) *Offer {
	node, err := ouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ouo *OfferUpdateOne) Exec(ctx context.Context) error {
	_, err := ouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouo *OfferUpdateOne) ExecX(ctx context.Context) {
	if err := ouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ouo *OfferUpdateOne) defaults() {
	if _, ok := ouo.mutation.UpdatedAt(); !ok {
		v := offer.UpdateDefaultUpdatedAt()
		ouo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ouo *OfferUpdateOne) check() error {
	if v, ok := ouo.mutation.Status(); ok {
		if err := offer.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Offer.status": %w`, err)}
		}
	}
	return nil
}

func (ouo *OfferUpdateOne) sqlSave(ctx context.Context) (_node *Offer, err error) {
	if err := ouo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(offer.Table, offer.Columns, sqlgraph.NewFieldSpec(offer.FieldID, field.TypeUUID))
	id, ok := ouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Offer.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, offer.FieldID)
		for _, f := range fields {
			if !offer.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != offer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ouo.mutation.MasterID(); ok {
		_spec.SetField(offer.FieldMasterID, field.TypeUUID, value)
	}
	if value, ok := ouo.mutation.OrderID(); ok {
		_spec.SetField(offer.FieldOrderID, field.TypeUUID, value)
	}
	if value, ok := ouo.mutation.Status(); ok {
		_spec.SetField(offer.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := ouo.mutation.Price(); ok {
		_spec.SetField(offer.FieldPrice, field.TypeFloat32, value)
	}
	if value, ok := ouo.mutation.AddedPrice(); ok {
		_spec.AddField(offer.FieldPrice, field.TypeFloat32, value)
	}
	if value, ok := ouo.mutation.CreatedAt(); ok {
		_spec.SetField(offer.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ouo.mutation.UpdatedAt(); ok {
		_spec.SetField(offer.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &Offer{config: ouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{offer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ouo.mutation.done = true
	return _node, nil
}
