// Code generated by ent, DO NOT EDIT.

package offer

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/Ostap00034/course-work-backend-offer-service/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Offer {
	return predicate.Offer(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Offer {
	return predicate.Offer(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Offer {
	return predicate.Offer(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Offer {
	return predicate.Offer(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Offer {
	return predicate.Offer(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Offer {
	return predicate.Offer(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Offer {
	return predicate.Offer(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Offer {
	return predicate.Offer(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Offer {
	return predicate.Offer(sql.FieldLTE(FieldID, id))
}

// MasterID applies equality check predicate on the "master_id" field. It's identical to MasterIDEQ.
func MasterID(v uuid.UUID) predicate.Offer {
	return predicate.Offer(sql.FieldEQ(FieldMasterID, v))
}

// OrderID applies equality check predicate on the "order_id" field. It's identical to OrderIDEQ.
func OrderID(v uuid.UUID) predicate.Offer {
	return predicate.Offer(sql.FieldEQ(FieldOrderID, v))
}

// Price applies equality check predicate on the "price" field. It's identical to PriceEQ.
func Price(v float32) predicate.Offer {
	return predicate.Offer(sql.FieldEQ(FieldPrice, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Offer {
	return predicate.Offer(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Offer {
	return predicate.Offer(sql.FieldEQ(FieldUpdatedAt, v))
}

// MasterIDEQ applies the EQ predicate on the "master_id" field.
func MasterIDEQ(v uuid.UUID) predicate.Offer {
	return predicate.Offer(sql.FieldEQ(FieldMasterID, v))
}

// MasterIDNEQ applies the NEQ predicate on the "master_id" field.
func MasterIDNEQ(v uuid.UUID) predicate.Offer {
	return predicate.Offer(sql.FieldNEQ(FieldMasterID, v))
}

// MasterIDIn applies the In predicate on the "master_id" field.
func MasterIDIn(vs ...uuid.UUID) predicate.Offer {
	return predicate.Offer(sql.FieldIn(FieldMasterID, vs...))
}

// MasterIDNotIn applies the NotIn predicate on the "master_id" field.
func MasterIDNotIn(vs ...uuid.UUID) predicate.Offer {
	return predicate.Offer(sql.FieldNotIn(FieldMasterID, vs...))
}

// MasterIDGT applies the GT predicate on the "master_id" field.
func MasterIDGT(v uuid.UUID) predicate.Offer {
	return predicate.Offer(sql.FieldGT(FieldMasterID, v))
}

// MasterIDGTE applies the GTE predicate on the "master_id" field.
func MasterIDGTE(v uuid.UUID) predicate.Offer {
	return predicate.Offer(sql.FieldGTE(FieldMasterID, v))
}

// MasterIDLT applies the LT predicate on the "master_id" field.
func MasterIDLT(v uuid.UUID) predicate.Offer {
	return predicate.Offer(sql.FieldLT(FieldMasterID, v))
}

// MasterIDLTE applies the LTE predicate on the "master_id" field.
func MasterIDLTE(v uuid.UUID) predicate.Offer {
	return predicate.Offer(sql.FieldLTE(FieldMasterID, v))
}

// OrderIDEQ applies the EQ predicate on the "order_id" field.
func OrderIDEQ(v uuid.UUID) predicate.Offer {
	return predicate.Offer(sql.FieldEQ(FieldOrderID, v))
}

// OrderIDNEQ applies the NEQ predicate on the "order_id" field.
func OrderIDNEQ(v uuid.UUID) predicate.Offer {
	return predicate.Offer(sql.FieldNEQ(FieldOrderID, v))
}

// OrderIDIn applies the In predicate on the "order_id" field.
func OrderIDIn(vs ...uuid.UUID) predicate.Offer {
	return predicate.Offer(sql.FieldIn(FieldOrderID, vs...))
}

// OrderIDNotIn applies the NotIn predicate on the "order_id" field.
func OrderIDNotIn(vs ...uuid.UUID) predicate.Offer {
	return predicate.Offer(sql.FieldNotIn(FieldOrderID, vs...))
}

// OrderIDGT applies the GT predicate on the "order_id" field.
func OrderIDGT(v uuid.UUID) predicate.Offer {
	return predicate.Offer(sql.FieldGT(FieldOrderID, v))
}

// OrderIDGTE applies the GTE predicate on the "order_id" field.
func OrderIDGTE(v uuid.UUID) predicate.Offer {
	return predicate.Offer(sql.FieldGTE(FieldOrderID, v))
}

// OrderIDLT applies the LT predicate on the "order_id" field.
func OrderIDLT(v uuid.UUID) predicate.Offer {
	return predicate.Offer(sql.FieldLT(FieldOrderID, v))
}

// OrderIDLTE applies the LTE predicate on the "order_id" field.
func OrderIDLTE(v uuid.UUID) predicate.Offer {
	return predicate.Offer(sql.FieldLTE(FieldOrderID, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Offer {
	return predicate.Offer(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Offer {
	return predicate.Offer(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Offer {
	return predicate.Offer(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Offer {
	return predicate.Offer(sql.FieldNotIn(FieldStatus, vs...))
}

// PriceEQ applies the EQ predicate on the "price" field.
func PriceEQ(v float32) predicate.Offer {
	return predicate.Offer(sql.FieldEQ(FieldPrice, v))
}

// PriceNEQ applies the NEQ predicate on the "price" field.
func PriceNEQ(v float32) predicate.Offer {
	return predicate.Offer(sql.FieldNEQ(FieldPrice, v))
}

// PriceIn applies the In predicate on the "price" field.
func PriceIn(vs ...float32) predicate.Offer {
	return predicate.Offer(sql.FieldIn(FieldPrice, vs...))
}

// PriceNotIn applies the NotIn predicate on the "price" field.
func PriceNotIn(vs ...float32) predicate.Offer {
	return predicate.Offer(sql.FieldNotIn(FieldPrice, vs...))
}

// PriceGT applies the GT predicate on the "price" field.
func PriceGT(v float32) predicate.Offer {
	return predicate.Offer(sql.FieldGT(FieldPrice, v))
}

// PriceGTE applies the GTE predicate on the "price" field.
func PriceGTE(v float32) predicate.Offer {
	return predicate.Offer(sql.FieldGTE(FieldPrice, v))
}

// PriceLT applies the LT predicate on the "price" field.
func PriceLT(v float32) predicate.Offer {
	return predicate.Offer(sql.FieldLT(FieldPrice, v))
}

// PriceLTE applies the LTE predicate on the "price" field.
func PriceLTE(v float32) predicate.Offer {
	return predicate.Offer(sql.FieldLTE(FieldPrice, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Offer {
	return predicate.Offer(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Offer {
	return predicate.Offer(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Offer {
	return predicate.Offer(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Offer {
	return predicate.Offer(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Offer {
	return predicate.Offer(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Offer {
	return predicate.Offer(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Offer {
	return predicate.Offer(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Offer {
	return predicate.Offer(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Offer {
	return predicate.Offer(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Offer {
	return predicate.Offer(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Offer {
	return predicate.Offer(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Offer {
	return predicate.Offer(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Offer {
	return predicate.Offer(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Offer {
	return predicate.Offer(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Offer {
	return predicate.Offer(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Offer {
	return predicate.Offer(sql.FieldLTE(FieldUpdatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Offer) predicate.Offer {
	return predicate.Offer(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Offer) predicate.Offer {
	return predicate.Offer(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Offer) predicate.Offer {
	return predicate.Offer(sql.NotPredicates(p))
}
